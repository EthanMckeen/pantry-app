"use strict";
/*
 * Copyright (c) 2024 Scale3 Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.chromaInstrumentation = void 0;
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
const patch_1 = require("../chroma/patch");
// eslint-disable-next-line no-restricted-imports
const package_json_1 = require("../../../package.json");
const trace_attributes_1 = require("@langtrase/trace-attributes");
class ChromaInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor() {
        super(package_json_1.name, package_json_1.version);
    }
    manualPatch(chroma) {
        api_1.diag.debug('Manually instrumenting ChromaDB');
        this._patch(chroma);
    }
    init() {
        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('chromadb', ['>=1.8.1'], (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Patching ChromaDB SDK version ${moduleVersion}`);
            this._patch(moduleExports, moduleVersion);
            return moduleExports;
        }, (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Unpatching ChromaDB SDK version ${moduleVersion}`);
            if (moduleExports !== undefined) {
                this._unpatch(moduleExports);
            }
        });
        return [module];
    }
    _patch(chromadb, moduleVersion) {
        if ((0, instrumentation_1.isWrapped)(chromadb.Collection.prototype)) {
            Object.keys(trace_attributes_1.APIS.chromadb).forEach((api) => {
                this._unwrap(chromadb.Collection.prototype, trace_attributes_1.APIS.chromadb[api].OPERATION);
            });
        }
        Object.keys(trace_attributes_1.APIS.chromadb).forEach((api) => {
            this._wrap(chromadb.Collection.prototype, trace_attributes_1.APIS.chromadb[api].OPERATION, (originalMethod) => (0, patch_1.collectionPatch)(originalMethod, api, this.tracer, this.instrumentationVersion, moduleVersion));
        });
    }
    _unpatch(chromadb) {
        Object.keys(trace_attributes_1.APIS.chromadb).forEach((api) => {
            this._unwrap(chromadb.Collection.prototype, trace_attributes_1.APIS.chromadb[api].OPERATION);
        });
    }
}
exports.chromaInstrumentation = new ChromaInstrumentation();
//# sourceMappingURL=instrumentation.js.map