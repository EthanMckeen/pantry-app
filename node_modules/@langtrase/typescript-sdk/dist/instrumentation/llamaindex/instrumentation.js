"use strict";
/*
 * Copyright (c) 2024 Scale3 Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.llamaIndexInstrumentation = void 0;
const patch_1 = require("../llamaindex/patch");
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
// eslint-disable-next-line no-restricted-imports
const package_json_1 = require("../../../package.json");
class LlamaIndexInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor() {
        super(package_json_1.name, package_json_1.version);
    }
    manualPatch(llamaIndex) {
        api_1.diag.debug('Manually patching llamaIndex');
        this._patch(llamaIndex);
    }
    init() {
        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('llamaindex', ['>=0.1.10'], (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Patching LlamaIndex SDK version ${moduleVersion}`);
            this._patch(moduleExports, moduleVersion);
            return moduleExports;
        }, (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Unpatching LlamaIndex SDK version ${moduleVersion}`);
            if (moduleExports !== undefined) {
                this._unpatch(moduleExports);
            }
        });
        return [module];
    }
    _patch(llama, moduleVersion) {
        // Note: Instrumenting only the core concepts of LlamaIndex SDK
        // https://github.com/run-llama/LlamaIndexTS?tab=readme-ov-file
        for (const key in llama) {
            const cls = (llama)[key];
            if (cls.prototype !== undefined) {
                if (cls.prototype.query !== undefined) {
                    if ((0, instrumentation_1.isWrapped)(cls.prototype)) {
                        this._unwrap(cls.prototype, 'query');
                    }
                    this._wrap(cls.prototype, 'query', (originalMethod) => (0, patch_1.genericPatch)(originalMethod, `llamaindex.${key}.query`, 'query', this.tracer, this.instrumentationVersion, moduleVersion));
                }
                if (cls.prototype.retrieve !== undefined) {
                    if ((0, instrumentation_1.isWrapped)(cls.prototype)) {
                        this._unwrap(cls.prototype, 'retrieve');
                    }
                    this._wrap(cls.prototype, 'retrieve', (originalMethod) => (0, patch_1.genericPatch)(originalMethod, `llamaindex.${key}.retrieve`, 'retrieve_data', this.tracer, this.instrumentationVersion, moduleVersion));
                }
                if (cls.prototype.chat !== undefined) {
                    if ((0, instrumentation_1.isWrapped)(cls.prototype)) {
                        this._unwrap(cls.prototype, 'chat');
                    }
                    this._wrap(cls.prototype, 'chat', (originalMethod) => (0, patch_1.genericPatch)(originalMethod, `llamaindex.${key}.chat`, 'chat', this.tracer, this.instrumentationVersion, moduleVersion));
                }
                if (cls.prototype.call !== undefined) {
                    if ((0, instrumentation_1.isWrapped)(cls.prototype)) {
                        this._unwrap(cls.prototype, 'call');
                    }
                    this._wrap(cls.prototype, 'call', (originalMethod) => (0, patch_1.genericPatch)(originalMethod, `llamaindex.${key}.call`, 'prompt', this.tracer, this.instrumentationVersion, moduleVersion));
                }
                if (cls.prototype.extract !== undefined) {
                    if ((0, instrumentation_1.isWrapped)(cls.prototype)) {
                        this._unwrap(cls.prototype, 'extract');
                    }
                    this._wrap(cls.prototype, 'extract', (originalMethod) => (0, patch_1.genericPatch)(originalMethod, `llamaindex.${key}.extract`, 'extract_data', this.tracer, this.instrumentationVersion, moduleVersion));
                }
                if (cls.prototype.loadData !== undefined) {
                    if ((0, instrumentation_1.isWrapped)(cls.prototype)) {
                        this._unwrap(cls.prototype, 'loadData');
                    }
                    this._wrap(cls.prototype, 'loadData', (originalMethod) => (0, patch_1.genericPatch)(originalMethod, `llamaindex.${key}.loadData`, 'load_data', this.tracer, this.instrumentationVersion, moduleVersion));
                }
            }
        }
    }
    _unpatch(llama) {
        for (const key in llama) {
            const cls = (llama)[key];
            if (cls.prototype !== undefined) {
                if (cls.prototype.query !== undefined) {
                    this._unwrap(cls.prototype, 'query');
                }
                if (cls.prototype.retrieve !== undefined) {
                    this._unwrap(cls.prototype, 'retrieve');
                }
                if (cls.prototype.chat !== undefined) {
                    this._unwrap(cls.prototype, 'chat');
                }
                if (cls.prototype.call !== undefined) {
                    this._unwrap(cls.prototype, 'call');
                }
                if (cls.prototype.extract !== undefined) {
                    this._unwrap(cls.prototype, 'extract');
                }
                if (cls.prototype.loadData !== undefined) {
                    this._unwrap(cls.prototype, 'loadData');
                }
            }
        }
    }
}
exports.llamaIndexInstrumentation = new LlamaIndexInstrumentation();
//# sourceMappingURL=instrumentation.js.map