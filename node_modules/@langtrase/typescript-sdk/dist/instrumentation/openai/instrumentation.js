"use strict";
/*
 * Copyright (c) 2024 Scale3 Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.openAIInstrumentation = void 0;
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
const patch_1 = require("../openai/patch");
// eslint-disable-next-line no-restricted-imports
const package_json_1 = require("../../../package.json");
class OpenAIInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor() {
        super(package_json_1.name, package_json_1.version);
    }
    manualPatch(openai) {
        api_1.diag.debug('Manually patching openai');
        this._patch(openai);
    }
    init() {
        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('openai', ['>=4.26.1 <6.0.0'], (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Patching OpenAI SDK version ${moduleVersion}`);
            this._patch(moduleExports, moduleVersion);
            return moduleExports;
        }, (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Unpatching OpenAI SDK version ${moduleVersion}`);
            if (moduleExports !== undefined) {
                this._unpatch(moduleExports);
            }
        });
        return [module];
    }
    _patch(openai, moduleVersion) {
        if ((0, instrumentation_1.isWrapped)(openai.OpenAI.Chat.Completions.prototype)) {
            this._unwrap(openai.OpenAI.Chat.Completions.prototype, 'create');
        }
        if ((0, instrumentation_1.isWrapped)(openai.OpenAI.Images.prototype)) {
            this._unwrap(openai.OpenAI.Images.prototype, 'generate');
            this._unwrap(openai.OpenAI.Images.prototype, 'edit');
        }
        if ((0, instrumentation_1.isWrapped)(openai.OpenAI.Embeddings.prototype)) {
            this._unwrap(openai.OpenAI.Embeddings.prototype, 'create');
        }
        this._wrap(openai.OpenAI.Chat.Completions.prototype, 'create', (originalMethod) => (0, patch_1.chatCompletionCreate)(originalMethod, this.tracer, this.instrumentationVersion, moduleVersion));
        this._wrap(openai.OpenAI.Images.prototype, 'generate', (originalMethod) => (0, patch_1.imagesGenerate)(originalMethod, this.tracer, this.instrumentationVersion, moduleVersion));
        this._wrap(openai.OpenAI.Embeddings.prototype, 'create', (originalMethod) => (0, patch_1.embeddingsCreate)(originalMethod, this.tracer, this.instrumentationVersion, moduleVersion));
        this._wrap(openai.OpenAI.Images.prototype, 'edit', (originalMethod) => (0, patch_1.imageEdit)(originalMethod, this.tracer, this.instrumentationVersion, moduleVersion));
    }
    _unpatch(openai) {
        this._unwrap(openai.OpenAI.Chat.Completions.prototype, 'create');
        this._unwrap(openai.OpenAI.Images.prototype, 'generate');
        this._unwrap(openai.OpenAI.Images.prototype, 'edit');
        this._unwrap(openai.OpenAI.Embeddings.prototype, 'create');
    }
}
exports.openAIInstrumentation = new OpenAIInstrumentation();
//# sourceMappingURL=instrumentation.js.map