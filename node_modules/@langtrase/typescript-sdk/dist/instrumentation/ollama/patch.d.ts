import { Tracer } from '@opentelemetry/api';
import { ChatFn, ChatStreamFn, EmbeddingsFn, GenerateFn, GenerateStreamFn, IChatRequest, IChatResponse, IEmbeddingsRequest, IEmbeddingsResponse, IGenerateRequest, IGenerateResponse, IOllamaClient } from '../ollama/types';
export declare const chatPatch: (original: ChatStreamFn | ChatFn, tracer: Tracer, langtraceVersion: string, sdkName: string, moduleVersion?: string) => (this: IOllamaClient, chatRequest: IChatRequest) => Promise<IChatResponse | AsyncIterable<IChatResponse>>;
export declare const generatePatch: (original: GenerateStreamFn | GenerateFn, tracer: Tracer, langtraceVersion: string, sdkName: string, moduleVersion?: string) => (this: IOllamaClient, chatRequest: IGenerateRequest) => Promise<IGenerateResponse | AsyncIterable<IGenerateResponse>>;
export declare const generateStreamPatch: (original: GenerateStreamFn, tracer: Tracer, langtraceVersion: string, sdkName: string, moduleVersion?: string) => (this: IOllamaClient, generateRequest: IGenerateRequest) => Promise<IGenerateResponse>;
export declare const generatePatchNonStreamed: (original: GenerateFn, tracer: Tracer, langtraceVersion: string, sdkName: string, moduleVersion?: string) => (this: IOllamaClient, generateRequest: IGenerateRequest) => Promise<IGenerateResponse>;
export declare const chatPatchNonStreamed: (original: ChatFn, tracer: Tracer, langtraceVersion: string, sdkName: string, moduleVersion?: string) => (this: IOllamaClient, chatRequest: IChatRequest) => Promise<IChatResponse>;
export declare const chatStreamPatch: (original: ChatStreamFn, tracer: Tracer, langtraceVersion: string, sdkName: string, moduleVersion?: string) => (this: IOllamaClient, chatRequest: IChatRequest & {
    stream: true;
}) => Promise<AsyncIterable<IChatResponse>>;
export declare const embeddingsPatch: (original: EmbeddingsFn, tracer: Tracer, langtraceVersion: string, sdkName: string, moduleVersion?: string) => (this: IOllamaClient, request: IEmbeddingsRequest) => Promise<IEmbeddingsResponse>;
