"use strict";
/*
 * Copyright (c) 2024 Scale3 Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cohereInstrumentation = void 0;
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
// eslint-disable-next-line no-restricted-imports
const package_json_1 = require("../../../package.json");
const patch_1 = require("../cohere/patch");
class CohereInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor() {
        super(package_json_1.name, package_json_1.version);
    }
    manualPatch(cohere) {
        api_1.diag.debug('Manually instrumenting cohere');
        this._patch(cohere);
    }
    init() {
        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('cohere-ai', ['>= 7.2.0'], (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Patching cohere SDK version ${moduleVersion}`);
            this._patch(moduleExports, moduleVersion);
            return moduleExports;
        }, (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Unpatching cohere SDK version ${moduleVersion}`);
            if (moduleExports !== undefined) {
                this._unpatch(moduleExports);
            }
        });
        return [module];
    }
    _patch(cohere, moduleVersion) {
        if ((0, instrumentation_1.isWrapped)(cohere.CohereClient.prototype)) {
            this._unpatch(cohere);
        }
        this._wrap(cohere.CohereClient.prototype, cohere.CohereClient.prototype.chat.name, (original) => (0, patch_1.chatPatch)(original, this.tracer, this.instrumentationVersion, package_json_1.name, moduleVersion));
        this._wrap(cohere.CohereClient.prototype, cohere.CohereClient.prototype.chatStream.name, (original) => (0, patch_1.chatStreamPatch)(original, this.tracer, this.instrumentationVersion, package_json_1.name, moduleVersion));
        this._wrap(cohere.CohereClient.prototype, cohere.CohereClient.prototype.embed.name, (original) => (0, patch_1.embedPatch)(original, this.tracer, this.instrumentationVersion, package_json_1.name, moduleVersion));
        this._wrap(cohere.CohereClient.prototype, cohere.CohereClient.prototype.rerank.name, (original) => (0, patch_1.rerankPatch)(original, this.tracer, this.instrumentationVersion, package_json_1.name, moduleVersion));
        this._wrap(cohere.CohereClient.prototype.embedJobs, 'create', (original) => (0, patch_1.embedJobsCreatePatch)(original, this.tracer, this.instrumentationVersion, package_json_1.name, moduleVersion));
    }
    _unpatch(cohere) {
        this._unwrap(cohere.CohereClient.prototype, 'chat');
        this._unwrap(cohere.CohereClient.prototype, 'chatStream');
        this._unwrap(cohere.CohereClient.prototype, 'embed');
        this._unwrap(cohere.CohereClient.prototype, 'rerank');
        this._unwrap(cohere.CohereClient.prototype.embedJobs, 'create');
    }
}
exports.cohereInstrumentation = new CohereInstrumentation();
//# sourceMappingURL=instrumentation.js.map