"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamTextPatch = exports.embedPatch = exports.generateTextPatch = void 0;
/* eslint-disable @typescript-eslint/no-this-alias */
const trace_attributes_1 = require("@langtrase/trace-attributes");
const openai_1 = require("../vercel/openai");
function generateTextPatch(originalMethod, method, tracer, langtraceVersion, sdkName, version) {
    const patchThis = this;
    return async function (...args) {
        if (args[0]?.model?.config?.provider?.includes(trace_attributes_1.Vendors.OPENAI) === true) {
            return await openai_1.generateTextPatchOpenAI.call(this, patchThis, args, originalMethod, method, tracer, langtraceVersion, sdkName, version);
        }
        const result = originalMethod.apply(this, args);
        if (result instanceof Promise) {
            return await result;
        }
        return result;
    };
}
exports.generateTextPatch = generateTextPatch;
function embedPatch(originalMethod, method, tracer, langtraceVersion, sdkName, version) {
    const patchThis = this;
    return async function (...args) {
        if (args[0]?.model?.config?.provider?.includes(trace_attributes_1.Vendors.OPENAI) === true) {
            return await openai_1.embedPatchOpenAI.call(this, patchThis, args, originalMethod, method, tracer, langtraceVersion, sdkName, version);
        }
        const result = originalMethod.apply(this, args);
        if (result instanceof Promise) {
            return await result;
        }
        return result;
    };
}
exports.embedPatch = embedPatch;
function streamTextPatch(originalMethod, method, tracer, langtraceVersion, sdkName, version) {
    const patchThis = this;
    return async function (...args) {
        if (args[0]?.model?.config?.provider?.includes(trace_attributes_1.Vendors.OPENAI) === true) {
            return await openai_1.streamTextPatchOpenAI.call(this, patchThis, args, originalMethod, method, tracer, langtraceVersion, sdkName, version);
        }
        const result = originalMethod.apply(this, args);
        if (result instanceof Promise) {
            return await result;
        }
        return result;
    };
}
exports.streamTextPatch = streamTextPatch;
//# sourceMappingURL=patch.js.map