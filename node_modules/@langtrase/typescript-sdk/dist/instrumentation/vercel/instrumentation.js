"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.vercelAIInstrumentation = void 0;
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
/* eslint-disable no-restricted-imports */
const package_json_1 = require("../../../package.json");
const trace_attributes_1 = require("@langtrase/trace-attributes");
const patch_1 = require("../vercel/patch");
class VercelAIInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor() {
        super(package_json_1.name, package_json_1.version);
    }
    manualPatch(module) {
        this._patch(module, package_json_1.version);
    }
    init() {
        const module = new instrumentation_1.InstrumentationNodeModuleDefinition('../../module-wrappers/ai', ['*'], (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Patching Vercel AI SDK version ${moduleVersion}`);
            this._patch(moduleExports, moduleVersion);
            return moduleExports;
        }, (moduleExports, moduleVersion) => {
            api_1.diag.debug(`Unpatching Vercel AI SDK version ${moduleVersion}`);
            if (moduleExports !== undefined) {
                this._unpatch(moduleExports);
            }
        });
        return [module];
    }
    _patch(moduleExports, moduleVersion) {
        this._wrap(moduleExports, 'generateText', (original) => patch_1.generateTextPatch.call(this, original, trace_attributes_1.APIS.ai.GENERATE_TEXT.METHOD, this.tracer, package_json_1.version, package_json_1.name, moduleVersion));
        this._wrap(moduleExports, 'streamText', (original) => patch_1.streamTextPatch.call(this, original, trace_attributes_1.APIS.ai.STREAM_TEXT.METHOD, this.tracer, package_json_1.version, package_json_1.name, moduleVersion));
        this._wrap(moduleExports, 'embed', (original) => patch_1.embedPatch.call(this, original, trace_attributes_1.APIS.ai.EMBED.METHOD, this.tracer, package_json_1.version, package_json_1.name, moduleVersion));
        this._wrap(moduleExports, 'embedMany', (original) => patch_1.embedPatch.call(this, original, trace_attributes_1.APIS.ai.EMBED_MANY.METHOD, this.tracer, package_json_1.version, package_json_1.name, moduleVersion));
    }
    _unpatch(module) {
        this._unwrap(module, 'generateText');
        this._unwrap(module, 'streamText');
        this._unwrap(module, 'embed');
        this._unwrap(module, 'embedMany');
    }
}
exports.vercelAIInstrumentation = new VercelAIInstrumentation();
//# sourceMappingURL=instrumentation.js.map