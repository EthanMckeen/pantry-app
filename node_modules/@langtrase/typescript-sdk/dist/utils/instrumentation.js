"use strict";
/*
 * Copyright (c) 2024 Scale3 Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.withAdditionalAttributes = exports.withLangTraceRootSpan = void 0;
const common_1 = require("../constants/common");
const api_1 = require("@opentelemetry/api");
/**
 *
 * @param fn  The function to be executed within the context of the root span. The function should accept the spanId and traceId as arguments
 * @param name Name of the root span
 * @param spanAttributes Attributes to be added to the root span
 * @param spanKind The kind of span to be created
 * @returns result of the function
 */
async function withLangTraceRootSpan(fn, name = 'LangtraceRootSpan', spanKind = api_1.SpanKind.INTERNAL) {
    // Use the OpenTelemetry context management API to set the current span
    const currentContext = api_1.context.active();
    const tracer = api_1.trace.getTracer('@langtrase/typescript-sdk');
    const rootSpan = tracer.startSpan(name, { kind: spanKind, attributes: { 'langtrace.sdk.name': '@langtrase/typescript-sdk' } }, currentContext);
    return await api_1.context.with(api_1.trace.setSpan(currentContext, rootSpan), async () => {
        try {
            // Execute the wrapped function
            const result = await fn(rootSpan.spanContext().spanId, rootSpan.spanContext().traceId);
            rootSpan.setStatus({ code: api_1.SpanStatusCode.OK });
            return result;
        }
        catch (error) {
            rootSpan.setStatus({
                code: api_1.SpanStatusCode.ERROR,
                message: error.message
            });
            throw error;
        }
        finally {
            // Ensure the root span is ended after function execution
            rootSpan.end();
        }
    });
}
exports.withLangTraceRootSpan = withLangTraceRootSpan;
/**
 *
 * @param fn function to be executed within the context with the custom attributes added to the current context
 * @param attributes custom attributes to be added to the current context
 * @returns result of the function
 */
async function withAdditionalAttributes(fn, attributes) {
    const currentContext = api_1.context.active();
    const contextWithAttributes = currentContext.setValue(common_1.LANGTRACE_ADDITIONAL_SPAN_ATTRIBUTES_KEY, attributes);
    if (attributes instanceof Promise) {
        attributes = await attributes;
    }
    // Execute the function within the context that has the custom attributes
    return await api_1.context.with(contextWithAttributes, fn);
}
exports.withAdditionalAttributes = withAdditionalAttributes;
//# sourceMappingURL=instrumentation.js.map