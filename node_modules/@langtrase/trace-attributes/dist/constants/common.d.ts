import { properties as LLMSpanAttributesObj } from '../schemas/llm_span_attributes.json';
import { properties as DatabaseSpanAttributesObj } from '../schemas/database_span_attributes.json';
import { properties as FrameworkSpanAttributesObj } from '../schemas/framework_span_attributes.json';
import { AnthropicFunctions } from './anthropic';
import { PgFunctions } from './pg';
import { ChromadbFunctions } from './chroma';
import { CohereFunctions } from './cohere';
import { GroqFunctions } from './groq';
import { LlamaIndexFunctions } from './llamaindex';
import { OpenAIFunctions } from './openai';
import { PineConeFunctions } from './pinecone';
import { QdrantFunctions } from './qdrant';
import { WeaviateFunctions } from './weaviate';
import { TiktokenModel, TiktokenEncoding } from 'tiktoken';
import { OllamaFunctions } from './ollama';
import { VercelAIFunctions } from './ai';
export declare const LLMSpanAttributeNames: Array<keyof typeof LLMSpanAttributesObj>;
export declare const DatabaseSpanAttributeNames: Array<keyof typeof DatabaseSpanAttributesObj>;
export declare const FrameworkSpanAttributeNames: Array<keyof typeof FrameworkSpanAttributesObj>;
export declare const Vendors: {
    readonly OPENAI: "openai";
    readonly COHERE: "cohere";
    readonly ANTHROPIC: "anthropic";
    readonly GROQ: "groq";
    readonly PINECONE: "pinecone";
    readonly LLAMAINDEX: "llamaindex";
    readonly CHROMADB: "chromadb";
    readonly QDRANT: "qdrant";
    readonly WEAVIATE: "weaviate";
    readonly PG: "pg";
    readonly VERCEL: "ai";
    readonly OLLAMA: "ollama";
};
export declare enum Event {
    STREAM_START = "stream.start",
    STREAM_OUTPUT = "stream.output",
    STREAM_END = "stream.end",
    RESPONSE = "response",
    GEN_AI_COMPLETION = "gen_ai.content.completion",
    GEN_AI_COMPLETION_CHUNK = "gen_ai.completion.chunk",
    GEN_AI_PROMPT = "gen_ai.content.prompt"
}
export type Vendor = typeof Vendors[keyof typeof Vendors];
interface VendorInstrumentationFunctions {
    openai: OpenAIFunctions[];
    cohere: CohereFunctions[];
    anthropic: AnthropicFunctions[];
    groq: GroqFunctions[];
    pinecone: PineConeFunctions[];
    llamaindex: LlamaIndexFunctions[];
    chromadb: ChromadbFunctions[];
    qdrant: QdrantFunctions[];
    weaviate: WeaviateFunctions[];
    pg: PgFunctions[];
    ai: VercelAIFunctions[];
    ollama: OllamaFunctions[];
}
export type VendorTracedFunctions = {
    [key in Vendor]: VendorInstrumentationFunctions[key];
};
export declare const TracedFunctionsByVendor: VendorTracedFunctions;
export declare const TIKTOKEN_MODEL_MAPPING: Record<TiktokenModel | string, TiktokenEncoding>;
export {};
