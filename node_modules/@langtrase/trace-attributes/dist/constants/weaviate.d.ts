/**
 * Map of query type to the function names for which we trace properties used by the client builder.
 * This map only applies to the Weaviate client builder that implement the CommandBase interface i.e implement a "do" function.
 */
export declare const queryTypeToFunctionToProps: {
    graphql: {
        readonly collectionName: readonly ["className"];
        readonly get: readonly ["after", "askString", "bm25String", "className", "fields", "groupString", "hybridString", "includesNearMediaFilter", "limit", "nearImageNotSet", "nearMediaString", "nearMediaType", "nearObjectString", "nearTextString", "nearVectorString", "offset", "sortString", "whereString", "generateString", "consistencyLevel", "groupByString", "tenant", "autocut"];
        readonly aggregate: readonly ["className", "fields", "groupBy", "includesNearMediaFilter", "limit", "nearMediaString", "nearMediaType", "nearObjectString", "nearTextString", "nearVectorString", "objectLimit", "whereString", "tenant"];
        readonly explore: readonly ["askString", "fields", "group", "limit", "includesNearMediaFilter", "nearMediaString", "nearMediaType", "nearObjectString", "nearTextString", "nearVectorString", "params"];
        readonly raw: readonly ["query"];
    };
    schema: {
        readonly collectionName: readonly ["class.class", "className"];
        readonly classCreator: readonly ["class.class"];
        readonly classDeleter: readonly ["className"];
        readonly propertyCreator: readonly ["className", "property"];
        readonly classGetter: readonly ["className"];
        readonly shardsGetter: readonly ["className"];
        readonly shardsUpdater: readonly ["className", "shardName", "status", "shards"];
        readonly tenantsCreator: readonly ["className", "tenants"];
        readonly tenantsGetter: readonly ["className"];
        readonly tenantsUpdater: readonly ["className", "tenants"];
        readonly tenantExists: readonly ["className", "tenant"];
    };
    batch: {
        readonly collectionName: readonly [];
        readonly objectsBatcher: readonly ["consistencyLevel", "objects"];
        readonly referencesBatcher: readonly ["consistencyLevel", "beaconPath"];
        readonly referencePayloadBuilder: readonly ["fromClassName", "fromId", "fromRefProp", "toClassName", "toId"];
    };
};
type AllNestedMethods<T, Prefix extends string = ''> = {
    [K in keyof T]: K extends 'collectionName' ? never : T[K] extends object ? AllNestedMethods<T[K], `${Prefix}${K & string}.`> | `${Prefix}${K & string}.do` : never;
}[keyof T & string];
type NestedMethodsOnly<T> = {
    [K in keyof T]: T[K] extends object ? AllNestedMethods<T[K], `${K & string}.`> : never;
}[keyof T & string];
export type WeaviateFunctions = NestedMethodsOnly<typeof queryTypeToFunctionToProps>;
export declare const WeaviateFunctionNames: WeaviateFunctions[];
export {};
