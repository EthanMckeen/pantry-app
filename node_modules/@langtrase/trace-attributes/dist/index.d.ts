import { LLMSpanAttributes as LLMSpanAttributesInternal } from "./models/llm_span_attributes";
import { DatabaseSpanAttributes as DatabaseSpanAttributesInternal } from "./models/database_span_attributes";
import { FrameworkSpanAttributes as FrameworkSpanAttributesInternal } from "./models/framework_span_attributes";
import { LLMSpanAttributeNames, DatabaseSpanAttributeNames, FrameworkSpanAttributeNames, Vendor, Event, TracedFunctionsByVendor, Vendors } from "./constants/common";
import { queryTypeToFunctionToProps } from "./constants/weaviate";
import { TIKTOKEN_MODEL_MAPPING } from "./constants/common";
/** Opentelemetry span attributes */
/**
 * Attributes is a map from string to attribute values.
 *
 * Note: only the own enumerable keys are counted as valid attribute keys.
 */
export interface Attributes {
    [attributeKey: string]: AttributeValue | undefined;
}
/**
* Attribute values may be any non-nullish primitive value except an object.
*
* null or undefined attribute values are invalid and will result in undefined behavior.
*/
export declare type AttributeValue = string | number | boolean | Array<null | undefined | string> | Array<null | undefined | number> | Array<null | undefined | boolean>;
export type LLMSpanAttributes = Attributes & (LLMSpanAttributesInternal);
export type DatabaseSpanAttributes = Attributes & (DatabaseSpanAttributesInternal);
export type FrameworkSpanAttributes = Attributes & (FrameworkSpanAttributesInternal);
declare const APIS: {
    anthropic: {
        readonly MESSAGES_CREATE: {
            readonly METHOD: "anthropic.messages.create";
            readonly ENDPOINT: "/v1/messages";
        };
    };
    pg: {
        readonly QUERY: {
            readonly METHOD: "pg.Client.query";
        };
    };
    chromadb: {
        readonly ADD: {
            readonly METHOD: "chromadb.collection.add";
            readonly OPERATION: "add";
        };
        readonly QUERY: {
            readonly METHOD: "chromadb.collection.query";
            readonly OPERATION: "query";
        };
        readonly DELETE: {
            readonly METHOD: "chromadb.collection.delete";
            readonly OPERATION: "delete";
        };
        readonly PEEK: {
            readonly METHOD: "chromadb.collection.peek";
            readonly OPERATION: "peek";
        };
        readonly UPDATE: {
            readonly METHOD: "chromadb.collection.update";
            readonly OPERATION: "update";
        };
        readonly MODIFY: {
            readonly METHOD: "chromadb.collection.modify";
            readonly OPERATION: "modify";
        };
        readonly COUNT: {
            readonly METHOD: "chromadb.collection.count";
            readonly OPERATION: "count";
        };
    };
    cohere: {
        readonly CHAT: {
            readonly METHOD: "cohere.chat";
            readonly ENDPOINT: "/v1/chat";
        };
        readonly CHAT_STREAM: {
            readonly METHOD: "cohere.chatStream";
            readonly ENDPOINT: "/v1/chat";
        };
        readonly EMBED: {
            readonly METHOD: "cohere.embed";
            readonly ENDPOINT: "/v1/embed";
        };
        readonly EMBED_JOBS: {
            readonly METHOD: "cohere.embedJobs.create";
            readonly ENDPOINT: "/v1/embed-jobs";
        };
        readonly RERANK: {
            readonly METHOD: "cohere.rerank";
            readonly ENDPOINT: "/v1/rerank";
        };
    };
    groq: {
        readonly CHAT_COMPLETION: {
            readonly METHOD: "groq.chat.completions.create";
            readonly ENDPOINT: "/chat/completions";
        };
    };
    llamaindex: {
        readonly RETIREVER_QUERY_ENGINE_QUERY: {
            readonly METHOD: "llamaindex.RetrieverQueryEngine.query";
        };
        readonly RETIREVER_QUERY_ENGINE_RETRIEVE: {
            readonly METHOD: "llamaindex.RetrieverQueryEngine.retrieve";
        };
        readonly VECTOR_INDEX_RETRIEVER_RETRIEVE: {
            readonly METHOD: "llamaindex.VectorIndexRetriever.retrieve";
        };
        readonly SIMPLE_VECTOR_STORE_QUERY: {
            readonly METHOD: "llamaindex.SimpleVectorStore.query";
        };
        readonly OPEN_AI_CHAT: {
            readonly METHOD: "llamaindex.OpenAI.chat";
        };
    };
    openai: {
        readonly CHAT_COMPLETION: {
            readonly METHOD: "openai.chat.completions.create";
            readonly ENDPOINT: "/chat/completions";
        };
        readonly IMAGES_GENERATION: {
            readonly METHOD: "openai.images.generate";
            readonly ENDPOINT: "/images/generations";
        };
        readonly IMAGES_EDIT: {
            readonly METHOD: "openai.images.edit";
            readonly ENDPOINT: "/images/edits";
        };
        readonly EMBEDDINGS_CREATE: {
            readonly METHOD: "openai.embeddings.create";
            readonly ENDPOINT: "/embeddings";
        };
    };
    pinecone: {
        readonly UPSERT: {
            readonly METHOD: "pinecone.index.upsert";
            readonly ENDPOINT: "/vectors/upsert";
            readonly OPERATION: "upsert";
        };
        readonly QUERY: {
            readonly METHOD: "pinecone.index.query";
            readonly ENDPOINT: "/query";
            readonly OPERATION: "query";
        };
        readonly DELETE_ONE: {
            readonly METHOD: "pinecone.index.deleteOne";
            readonly ENDPOINT: "/vectors/delete";
            readonly OPERATION: "deleteOne";
        };
        readonly DELETE_MANY: {
            readonly METHOD: "pinecone.index.deleteMany";
            readonly ENDPOINT: "/vectors/delete";
            readonly OPERATION: "deleteMany";
        };
        readonly DELETE_ALL: {
            readonly METHOD: "pinecone.index.deleteAll";
            readonly ENDPOINT: "/vectors/delete";
            readonly OPERATION: "deleteAll";
        };
    };
    qdrant: {
        readonly GET_COLLECTION: {
            readonly METHOD: "qdrantdb.get_collection";
            readonly OPERATION: "getCollection";
        };
        readonly GET_COLLECTIONS: {
            readonly METHOD: "qdrantdb.get_collections";
            readonly OPERATION: "getCollections";
        };
        readonly DELETE: {
            readonly METHOD: "qdrantdb.delete";
            readonly OPERATION: "delete";
        };
        readonly DISCOVER: {
            readonly METHOD: "qdrantdb.discover";
            readonly OPERATION: "discoverPoints";
        };
        readonly DISCOVER_BATCH: {
            readonly METHOD: "qdrantdb.discover_batch";
            readonly OPERATION: "discoverBatchPoints";
        };
        readonly RECOMMEND: {
            readonly METHOD: "qdrantdb.recommend";
            readonly OPERATION: "recommend";
        };
        readonly RECOMMEND_BATCH: {
            readonly METHOD: "qdrantdb.recommend_batch";
            readonly OPERATION: "recommendBatch";
        };
        readonly RETRIEVE: {
            readonly METHOD: "qdrantdb.retrieve";
            readonly OPERATION: "retrieve";
        };
        readonly SEARCH: {
            readonly METHOD: "qdrantdb.search";
            readonly OPERATION: "search";
        };
        readonly SEARCH_BATCH: {
            readonly METHOD: "qdrantdb.search_batch";
            readonly OPERATION: "searchBatch";
        };
        readonly UPSERT: {
            readonly METHOD: "qdrantdb.upsert";
            readonly OPERATION: "upsert";
        };
        readonly COUNT: {
            readonly METHOD: "qdrantdb.count";
            readonly OPERATION: "count";
        };
        readonly UPDATE_COLLECTION: {
            readonly METHOD: "qdrantdb.update_collection";
            readonly OPERATION: "updateCollection";
        };
        readonly UPDATE_VECTORS: {
            readonly METHOD: "qdrantdb.update_vectors";
            readonly OPERATION: "updateVectors";
        };
    };
    ai: {
        readonly GENERATE_TEXT: {
            readonly METHOD: "ai.generateText";
        };
        readonly STREAM_TEXT: {
            readonly METHOD: "ai.streamText";
        };
        readonly EMBED: {
            readonly METHOD: "ai.embed";
        };
        readonly EMBED_MANY: {
            readonly METHOD: "ai.embedMany";
        };
    };
    ollama: {
        readonly GENERATE: {
            readonly METHOD: "ollama.generate";
            readonly ENDPOINT: "/api/generate";
        };
        readonly CHAT: {
            readonly METHOD: "ollama.chat";
            readonly ENDPOINT: "/api/chat";
        };
        readonly EMBEDDINGS: {
            readonly METHOD: "ollama.embeddings";
            readonly ENDPOINT: " /api/embeddings";
        };
    };
};
export { LLMSpanAttributeNames, DatabaseSpanAttributeNames, FrameworkSpanAttributeNames, Vendor, Event, TracedFunctionsByVendor, Vendors };
export { APIS, TIKTOKEN_MODEL_MAPPING, queryTypeToFunctionToProps };
